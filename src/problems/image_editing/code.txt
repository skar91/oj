"#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring ltrim(const string &);\nstring rtrim(const string &);\nvector<string> split(const string &);\n\n\n/*\n * Complete the 'largestMatrix' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nint largestMatrix(vector<vector<int>> arr) {\n\n}\n\n\nint main()\n{\n    ofstream fout(getenv(\"OUTPUT_PATH\"));\n\n    string arr_rows_temp;\n    getline(cin, arr_rows_temp);\n\n    int arr_rows = stoi(ltrim(rtrim(arr_rows_temp)));\n\n    string arr_columns_temp;\n    getline(cin, arr_columns_temp);\n\n    int arr_columns = stoi(ltrim(rtrim(arr_columns_temp)));\n\n    vector<vector<int>> arr(arr_rows);\n\n    for (int i = 0; i < arr_rows; i++) {\n        arr[i].resize(arr_columns);\n\n        string arr_row_temp_temp;\n        getline(cin, arr_row_temp_temp);\n\n        vector<string> arr_row_temp = split(rtrim(arr_row_temp_temp));\n\n        for (int j = 0; j < arr_columns; j++) {\n            int arr_row_item = stoi(arr_row_temp[j]);\n\n            arr[i][j] = arr_row_item;\n        }\n    }\n\n    int result = largestMatrix(arr);\n\n    fout << result << \"\\n\";\n\n    fout.close();\n\n    return 0;\n}\n\nstring ltrim(const string &str) {\n    string s(str);\n\n    s.erase(\n        s.begin(),\n        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))\n    );\n\n    return s;\n}\n\nstring rtrim(const string &str) {\n    string s(str);\n\n    s.erase(\n        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),\n        s.end()\n    );\n\n    return s;\n}\n\nvector<string> split(const string &str) {\n    vector<string> tokens;\n\n    string::size_type start = 0;\n    string::size_type end = 0;\n\n    while ((end = str.find(\" \", start)) != string::npos) {\n        tokens.push_back(str.substr(start, end - start));\n\n        start = end + 1;\n    }\n\n    tokens.push_back(str.substr(start));\n\n    return tokens;\n}\n"